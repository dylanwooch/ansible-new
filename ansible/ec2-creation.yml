---
- hosts: ansible-server
  gather_facts: True
  tasks:
    - name: Provision EC2 instance
      ec2:
        key_name: dylan-ansible
        region: ap-southeast-1
        instance_type: t2.micro
        image: ami-0abb8f6b71e7614d5
        wait: yes
        wait_timeout: 500
        count: 1  #number of instance
        instance_tags:
          Name: Ansible-EC2 Instance
        volumes:
          - device_name: /dev/xvda
            volume_type: gp2
            volume_size: 8
            delete_on_termination: yes
        monitoring: yes
        vpc_subnet_id: subnet-21cbc568
        assign_public_ip: yes
        group_id: sg-c4a326be
      register: ec2 


    - name: Wait for SSH to come up
      wait_for:
        host: "{{ ec2.instances[0].public_dns_name }}"
        port: 22
        delay: 60
        timeout: 320
        state: started

    - name: Create admin host
      add_host:
        name: ec2
        ansible_ssh_host: "{{ ec2.instances[0].public_ip }}"
        ansible_user: ec2-user
        ansible_host_key_checking: False


- hosts: ec2
  become: yes
  tasks: 
    - include_vars: /home/dywoo/ansible-new/vault/vault.yml
    
    # - name : "Create Groups"
    #   group:
    #     name: "{{item}}"
    #     state: "present"
    #   with_items:
    #     - adminteam
    #     - devopsteam

    #Creating admin user
    - name: Create cyberadmin user
      user:
        name: "{{ admin_user }}"
        password: "{{ admin_password }}"
        groups:
          - wheel
        state: present

    - name: Add public key to authorized_keys
      authorized_key:
        user: "{{ admin_user }}"
        state: present
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

    - name: Allow root from logging in
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^(#)?PermitRootLogin \w*$'
        line: 'PermitRootLogin yes'
        state: present
    
    - name: Allow Password Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: "PasswordAuthentication yes"
        state: present

    - name: Deny PubKey Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PubkeyAuthentication'
        line: "PubkeyAuthentication no"
        state: present

    - name: Add {{ admin_user }} to sudoers file
      lineinfile:
        path: /etc/sudoers
        regexp: '^{{ admin_user }}'
        line: '{{ admin_user }} ALL=(ALL) NOPASSWD: ALL' #allow sudo without authenticating
        validate: 'visudo -cf %s'

# #Creating logon user
# - hosts: ec2
#   become: yes
#   gather_facts: True
#   tasks:
#     - include_vars: /home/dywoo/ansible-new/vault/vault.yml
    - name: Create a logon account
      user:
        name: "{{ logon_user }}"
        password: "{{ logon_password }}"
        groups:
          - wheel
        state: present

    - name: Add public key to authorized_keys
      authorized_key:
        user: "{{ logon_user }}"
        state: present
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

    - name: Deny root from logging in
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^(#)?PermitRootLogin \w*$'
        line: 'PermitRootLogin no'
        state: present

    - name: Allow Password Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: "PasswordAuthentication yes"
        state: present

    - name: Deny PubKey Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PubkeyAuthentication'
        line: "PubkeyAuthentication no"
        state: present

    - name: Add {{ logon_user }} to sudoers file
      lineinfile:
        path: /etc/sudoers
        regexp: '^{{ logon_user }}'
        line: '{{ logon_user }} ALL=(ALL) !/bin/su' #preventing sudo access
        validate: 'visudo -cf %s'


# #Creating normal user
# - hosts: ec2
#   become: yes
#   tasks:
#     - include_vars: /home/dywoo/ansible-new/vault/vault.yml
    - name: Create a normal login user
      user:
        name: "{{ item }}"
        password: "{{ normal_password }}"
        groups:
          - wheel #set of users that are able to su
        state: present
      with_items: 
      - "{{ normal_user }}"

    - name: Add public key to authorized_keys
      authorized_key:
        user: "{{ item }}"
        state: present
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
      with_items: 
      - "{{ normal_user }}"
      
    - name: Deny root from logging in
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^(#)?PermitRootLogin \w*$'
        line: 'PermitRootLogin no'
        state: present

    - name: Allow Password Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: "PasswordAuthentication yes"
        state: present

    - name: Deny PubKey Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PubkeyAuthentication'
        line: "PubkeyAuthentication no"
        state: present

    - name: Deny {{ normal_user }} to sudoers file
      lineinfile:
        path: /etc/sudoers
        regexp: '^{{ normal_user }}'
        line: '{{ normal_user }} ALL=(ALL) !/bin/su' #preventing sudo access
        validate: 'visudo -cf %s'

    - name: Restart SSHD
      service:
        name: sshd
        state: restarted

#Onboarding Account
- hosts: ansible-server
  roles:
    - name: cyberark.modules
  collections:
    - cyberark.pas

  tasks:
    - include_vars: /home/dywoo/ansible-new/vault/vault.yml
    - name: Logon to CyberArk Vault using PAS Web Services SDK
      cyberark_authentication:
        api_base_url: "{{ web_services_base_url }}"
        concurrentSession: True
        use_cyberark_authentication: yes
        validate_certs: no
        username: "{{ pvwa_username }}"
        password: "{{ pvwa_password }}"
        
    - name: Debug message
      debug:
        var: cyberark_session

    #create logon account
    - name: Create logon account
      cyberark_account:
        logging_level: DEBUG
        identified_by: "address,username"
        safe: "UnixAccount"
        address: "{{ ec2.instances[0].public_ip }}"
        username: "{{ logon_user }}"
        platform_id: UnixSSH
        secret: " {{ onboard_password }}"
        secret_management:
            automatic_management_enabled: true
        state: present
        cyberark_session: "{{ cyberark_session }}"
      register: cyberarklogon

    - name: Create admin account
      cyberark_account:
        logging_level: DEBUG
        identified_by: "address,username"
        safe: "UnixAccount"
        address: "{{ ec2.instances[0].public_ip }}"
        username: "{{ admin_user }}"
        platform_id: UnixSSH
        secret: "{{ onboard_password }}"
        secret_management:
            automatic_management_enabled: true
        state: present
        cyberark_session: "{{ cyberark_session }}"
      register: cyberarkadmin

    # - debug: msg="{{ cyberarkadmin.result }}"
    #   when: cyberarkadmin.status_code == 201

    #Create user account
    - name: Create user account
      cyberark_account:
        logging_level: DEBUG
        identified_by: "address,username"
        safe: "UnixAccount"
        address: "{{ ec2.instances[0].public_ip }}"
        username: "{{ item }}"
        platform_id: UnixSSH
        secret: " {{ onboard_password }}"
        secret_management:
            automatic_management_enabled: true
        state: present
        cyberark_session: "{{ cyberark_session }}"
      with_items:
      - "{{ normal_user }}"
      register: cyberarkuser

    # - debug: msg="{{ item.result.result.id}}"
    #   with_items:
    #   - "{{ cyberarkuser.results }}"
      
    - name: Link reconcile account for user accounts
      # Create an item via API
      uri: 
        url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ item.result.result.id }}/LinkAccount"
        validate_certs: no
        method: POST
        return_content: yes
        headers:
          Authorization: "{{ cyberark_session.token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          safe: "{{ cyberarkadmin.result.result.safeName }}"
          extraPasswordIndex: 3 #reconcile
          name: "{{ cyberarkadmin.result.result.name }}"
          folder: Root
      loop_control:
        label: "{{item.result.result.id}} linked a reconcile account"
      with_items:
      - "{{ cyberarkuser.results }}"


    - name: Link logon account for cyberuser
      #Create an item via API
      uri: 
        url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ item.result.result.id }}/LinkAccount"
        validate_certs: no
        method: POST
        return_content: yes
        headers:
          Authorization: "{{ cyberark_session.token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          safe: "{{ cyberarklogon.result.result.safeName }}"
          extraPasswordIndex: 1 #logon 
          name: "{{ cyberarklogon.result.result.name }}"
          folder: Root
      loop_control:
        label: "{{item.result.result.id}} linked a logon account"
      with_items: 
      - "{{ cyberarkuser.results }}"


    - name: Link logon account for cyberadmin
      # Create an item via API
      uri: 
        url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ cyberarkadmin.result.result.id }}/LinkAccount"
        validate_certs: no
        method: POST
        return_content: yes
        headers:
          Authorization: "{{ cyberark_session.token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          safe: "{{ cyberarklogon.result.result.safeName }}"
          extraPasswordIndex: 1 #logon 
          name: "{{ cyberarklogon.result.result.name }}"
          folder: Root
    
    - name: Change cyberlogon account
      # Create an item via API
      uri: 
        url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ cyberarklogon.result.result.id }}/Change"
        validate_certs: no
        method: POST
        return_content: yes
        headers:
          Authorization: "{{ cyberark_session.token }}"
          Content-Type: "application/json"
        body_format: json
        body:
         ChangeEntireGroup: "false" 
    
    # - wait_for:
    #     delay: 300
    #     timeout: 0

    # - name: check for status 
    #   uri:
    #     url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ cyberarklogon.result.result.id }}" 
    #     validate_certs: no
    #     method: GET
    #     return_content: yes
    #     headers:
    #       Authorization: "{{ cyberark_session.token }}"
    #       Content-Type: "application/json"
    #   register: checklogon
      # until: checklogon.json.secretManagement.status == "success"
      # retries: 3
      # delay: 60

    # - debug: msg="{{ checklogon.json }}"
    #   when: checkuser.json.secretManagement.status == "success"

    - name: Change cyberadmin account
      # Create an item via API
      uri: 
        url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ cyberarkadmin.result.result.id }}/Change"
        validate_certs: no
        method: POST
        return_content: yes
        headers:
          Authorization: "{{ cyberark_session.token }}"
          Content-Type: "application/json"
        body_format: json
        body:
         ChangeEntireGroup: "false"        
    
    # - wait_for:
    #     delay: 300
    #     timeout: 0

    # - name: check for status 
    #   uri:
    #     url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ cyberarkadmin.result.result.id }}" 
    #     validate_certs: no
    #     method: GET
    #     return_content: yes
    #     headers:
    #       Authorization: "{{ cyberark_session.token }}"
    #       Content-Type: "application/json"
    #   register: checkadmin
      # until: checkadmin.json.secretManagement.status == "success"
      # retries: 3
      # delay: 60

    # - debug: msg="{{ checkadmin.json }}"
    #   when: checkadmin.json.secretManagement.status == "success"
    
    - name: Reconcile cyberuser account
      # Create an item via API
      uri: 
        url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ item.result.result.id }}/Reconcile"
        validate_certs: no
        method: POST
        return_content: yes
        headers:
          Authorization: "{{ cyberark_session.token }}"
          Content-Type: "application/json"
      loop_control:
        label: "{{item.result.result.id}} is being reconciled"
      with_items: 
      - "{{ cyberarkuser.results }}"

    # - wait_for:
    #     delay: 300
    #     timeout: 0

    # - name: check for status
    #   uri:
    #     url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ cyberarkuser.result.result.id }}" 
    #     validate_certs: no
    #     method: GET
    #     return_content: yes
    #     headers:
    #       Authorization: "{{ cyberark_session.token }}"
    #       Content-Type: "application/json"
    #   register: checkuser
      # until: checkuser.json.secretManagement.status == "success"
      # retries: 3
      # delay: 60

    # - debug: msg="{{ checkuser.json }}"
    #   when: checkuser.json.secretManagement.status == "success"


    - name: Logoff from CyberArk Vault
      cyberark_authentication:
        state: absent
        cyberark_session: "{{ cyberark_session }}"

    # - name: Debug message
    #   debug: var=cyberark_session

    - name: Create database
      mysql_db: 
        name: testdb 
        state: present
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
    
    # store in database (account id (cyberark) - instance id (aws) - account type (logon/recon/user) - status(success/failure)      
    - name: Create Table in database  
      mysql_query:
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        login_db: testdb
        query: 
        - CREATE TABLE IF NOT EXISTS pendingaccounts (instanceId VARCHAR(255) NOT NULL, id VARCHAR(255) NOT NULL,roles VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, address VARCHAR(255) NOT NULL, status VARCHAR(255) NOT NULL, categoryModificationTime BIGINT(255) NOT NULL, createdTime BIGINT(255) NOT NULL, lastModifiedTime BIGINT(255) NOT NULL, userName VARCHAR(255) NOT NULL, platformId VARCHAR(255) NOT NULL, safeName VARCHAR(255) NOT NULL, secretType VARCHAR(255) NOT NULL, noOfTries INT(255) NOT NULL, PRIMARY KEY(id));

    - name: Insert in database  
      mysql_query:
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        login_db: testdb
        query:
        - INSERT INTO pendingaccounts (instanceId, id, roles, name, address, status, categoryModificationTime, createdTime, lastModifiedTime, userName, platformId, safeName, secretType, noOfTries) VALUES ("{{ec2.instances[0].id}}", "{{cyberarkadmin.result.result.id}}", "admin", "{{cyberarkadmin.result.result.name}}", "{{cyberarkadmin.result.result.address}}", "pending", "{{cyberarkadmin.result.result.categoryModificationTime}}", "{{cyberarkadmin.result.result.createdTime}}", "{{cyberarkadmin.result.result.secretManagement.lastModifiedTime}}", "{{cyberarkadmin.result.result.userName}}", "{{cyberarkadmin.result.result.platformId}}", "{{cyberarkadmin.result.result.safeName}}", "{{cyberarkadmin.result.result.secretType}}", "0"); 
        - INSERT INTO pendingaccounts (instanceId, id, roles, name, address, status, categoryModificationTime, createdTime, lastModifiedTime, userName, platformId, safeName, secretType, noOfTries) VALUES ("{{ec2.instances[0].id}}", "{{cyberarklogon.result.result.id}}", "logon", "{{cyberarklogon.result.result.name}}", "{{cyberarklogon.result.result.address}}", "pending", "{{cyberarklogon.result.result.categoryModificationTime}}", "{{cyberarklogon.result.result.createdTime}}", "{{cyberarklogon.result.result.secretManagement.lastModifiedTime}}", "{{cyberarklogon.result.result.userName}}", "{{cyberarklogon.result.result.platformId}}", "{{cyberarklogon.result.result.safeName}}", "{{cyberarklogon.result.result.secretType}}", "0"); 
       

    - name: Insert in database  
      mysql_query:
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        login_db: testdb
        query:
        - INSERT INTO pendingaccounts (instanceId, id, roles, name, address, status, categoryModificationTime, createdTime, lastModifiedTime, userName, platformId, safeName, secretType, noOfTries) VALUES ("{{ec2.instances[0].id}}", "{{item.result.result.id}}", "user", "{{item.result.result.name}}", "{{item.result.result.address}}", "pending", "{{item.result.result.categoryModificationTime}}", "{{item.result.result.createdTime}}", "{{item.result.result.secretManagement.lastModifiedTime}}", "{{item.result.result.userName}}", "{{item.result.result.platformId}}", "{{item.result.result.safeName}}", "{{item.result.result.secretType}}", "0");
      loop_control:
        label: "{{item.result.result.id}} has been added into database"
      with_items: 
      - "{{ cyberarkuser.results }}"


    - name: Create Table in database  
      mysql_query:
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        login_db: testdb
        query: 
        - CREATE TABLE IF NOT EXISTS successfulaccounts (instanceId VARCHAR(255) NOT NULL, id VARCHAR(255) NOT NULL, roles VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, address VARCHAR(255) NOT NULL, status VARCHAR(255) NOT NULL, categoryModificationTime BIGINT(255) NOT NULL, createdTime BIGINT(255) NOT NULL, lastModifiedTime BIGINT(255) NOT NULL, userName VARCHAR(255) NOT NULL, platformId VARCHAR(255) NOT NULL, safeName VARCHAR(255) NOT NULL, secretType VARCHAR(255) NOT NULL, noOfTries INT(255) NOT NULL, PRIMARY KEY(id));
        
        #(dnsName VARCHAR(255) NOT NULL, id VARCHAR(255) NOT NULL, imageId VARCHAR(255) NOT NULL, instanceType VARCHAR(255) NOT NULL, launchTime VARCHAR(255) NOT NULL, privateDNSName VARCHAR(255) NOT NULL, privateIP VARCHAR(255) NOT NULL, publicDNSName VARCHAR(255) NOT NULL, publicIP VARCHAR(255) NOT NULL, region VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, PRIMARY KEY(id)); 
        #CREATE TABLE IF NOT EXISTS ec2 (dns_name VARCHAR(255) NOT NULL, groups VARCHAR(255) NOT NULL, id VARCHAR(255) NOT NULL, image_id VARCHAR(255) NOT NULL, instance_type VARCHAR(255) NOT NULL, launch_time VARCHAR(255) NOT NULL, private_dns_name VARCHAR(255) NOT NULL, private_ip VARCHAR(255) NOT NULL, public_dns_name VARCHAR(255) NOT NULL, public_ip VARCHAR(255) NOT NULL, region VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, PRIMARY KEY(id));

    # - name: Insert in database  
    #   mysql_query:
    #     login_user: "{{ db_user }}"
    #     login_password: "{{ db_password }}"
    #     login_db: testdb
    #     query: INSERT INTO ec2 (dnsName, id, imageId, instanceType, launchTime, privateDNSName, privateIP, publicDNSName, publicIP, region, name) VALUES ("{{ec2.instances[0].dns_name}}", "{{ec2.instances[0].id}}", "{{ec2.instances[0].image_id}}", "{{ec2.instances[0].instance_type}}", "{{ec2.instances[0].launch_time}}", "{{ec2.instances[0].private_dns_name}}", "{{ec2.instances[0].private_ip}}", "{{ec2.instances[0].public_dns_name}}", "{{ec2.instances[0].public_ip}}", "{{ec2.instances[0].region}}", "{{ec2.instances[0].tags.Name}}"); 
   
    
    #python script (task to check account status)
    