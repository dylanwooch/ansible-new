---
- hosts: ansible_server
  # serial: 2
  gather_facts: True
  # vars_prompt:
  # - name: instance
  #   prompt: How many instance(s) to launch?
  #   private: no 
  #   default: 1
  tasks:
    - include_vars: /home/dywoo/ansible-new/ansible/config.yml
    - include_vars: /home/dywoo/ansible-new/vault/vault.yml
    - name: Provision EC2 instance
      ec2:
        key_name: "{{ key_name }}"
        region: "{{ region }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: "{{ wait }}"
        wait_timeout: "{{ wait_timeout }}"
        count: "{{ count }}"  #number of instance
        instance_tags:
          Name: "{{ Name }}"
        volumes:
          - device_name: "{{ device_name }}"
            volume_type: "{{ volume_type }}"
            volume_size: "{{ volume_size }}"
            delete_on_termination: "{{ delete_on_termination }}"
        monitoring: "{{ monitoring }}"
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        assign_public_ip: "{{ assign_public_ip }}"
        group_id: "{{ group_id }}"
      register: ec2 

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ ec2.instances[0].public_dns_name }}"
        port: 22
        delay: 60
        timeout: 320
        state: started

    - name: Create admin host
      add_host:
        name: "{{ item.public_ip }}"
        ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"
        ansible_ssh_host: "{{ item.public_ip }}"
        ansible_user: ec2-user
        ansible_host_key_checking: False #prevent key from checking
        group: provision_server
      loop_control:
        label: "Host ({{item.public_ip}}) has been created"
      with_items: "{{ ec2.instances }}"
    
      # - { ip: "{{ provision_server_ip }}", user: "{{ ec2.instances }}" }
    # - name: Add the newly created EC2 instance(s) to the local host group
    #   lineinfile:
    #     path: ~/ansible-new/ansible/hosts
    #     regexp: "{{ item.public_ip }}"msg
    #     insertafter: '[provision_server]' 
    #     line: '{{ item.public_ip }}'
    #   with_items: '{{ec2.instances}}'   

- hosts: provision_server
  become: yes
  tasks: 
    - include_vars: /home/dywoo/ansible-new/vault/vault.yml
    
    # - name : "Create Groups"
    #   group:
    #     name: "{{item}}"
    #     state: "present"
    #   with_items:
    #     - adminteam
    #     - devopsteam

    #Creating admin user
    - name: Create cyberadmin user
      user:
        name: "{{ admin_user }}"
        password: "{{ admin_password }}"
        groups:
          - wheel
        state: present

    - name: Add public key to authorized_keys
      authorized_key:
        user: "{{ admin_user }}"
        state: present
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

    - name: Allow root from logging in
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^(#)?PermitRootLogin \w*$'
        line: 'PermitRootLogin yes'
        state: present
    
    - name: Allow Password Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: "PasswordAuthentication yes"
        state: present

    - name: Deny PubKey Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PubkeyAuthentication'
        line: "PubkeyAuthentication no"
        state: present

    - name: Add {{ admin_user }} to sudoers file
      lineinfile:
        path: /etc/sudoers
        regexp: '^{{ admin_user }}'
        line: '{{ admin_user }} ALL=(ALL) NOPASSWD: ALL' #allow sudo without authenticating
        validate: 'visudo -cf %s'


    #Create Logon Account
    - name: Create a logon account
      user:
        name: "{{ logon_user }}"
        password: "{{ logon_password }}"
        groups:
          - wheel
        state: present

    - name: Add public key to authorized_keys
      authorized_key:
        user: "{{ logon_user }}"
        state: present
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

    - name: Deny root from logging in
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^(#)?PermitRootLogin \w*$'
        line: 'PermitRootLogin no'
        state: present

    - name: Allow Password Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: "PasswordAuthentication yes"
        state: present

    - name: Deny PubKey Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PubkeyAuthentication'
        line: "PubkeyAuthentication no"
        state: present

    - name: Add {{ logon_user }} to sudoers file
      lineinfile:
        path: /etc/sudoers
        regexp: '^{{ logon_user }}'
        line: '{{ logon_user }} ALL=(ALL) !/bin/su' #preventing sudo access
        validate: 'visudo -cf %s'


    # #Creating normal users
    - name: Create a normal login user
      user:
        name: "{{ item }}"
        password: "{{ normal_password }}"
        groups:
          - wheel #set of users that are able to su
        state: present
      with_items: 
      - "{{ normal_user }}"

    - name: Add public key to authorized_keys
      authorized_key:
        user: "{{ item }}"
        state: present
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
      with_items: 
      - "{{ normal_user }}"
      
    - name: Deny root from logging in
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^(#)?PermitRootLogin \w*$'
        line: 'PermitRootLogin no'
        state: present

    - name: Allow Password Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: "PasswordAuthentication yes"
        state: present

    - name: Deny PubKey Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PubkeyAuthentication'
        line: "PubkeyAuthentication no"
        state: present

    - name: Deny {{ normal_user }} to sudoers file
      lineinfile:
        path: /etc/sudoers
        regexp: '^{{ item }}'
        line: '{{ item }} ALL=(ALL) !/bin/su' #preventing sudo access
        validate: 'visudo -cf %s'
      with_items:
        "{{ normal_user }}"

    - name: Restart SSHD
      service:
        name: sshd
        state: restarted

# #Onboarding Accounts
- hosts: ansible_server
  become: 
  #install cyberark pas module
  roles:
    - name: cyberark.modules
  collections:
    - cyberark.pas

  tasks:
    - include_vars: /home/dywoo/ansible-new/vault/vault.yml

    - name: Logon to CyberArk Vault using PAS Web Services SDK
      cyberark_authentication:
        api_base_url: "{{ web_services_base_url }}"
        concurrentSession: True
        use_cyberark_authentication: yes
        validate_certs: no
        username: "{{ pvwa_username }}"
        password: "{{ pvwa_password }}"
        
    # - name: Debug message
    #   debug:
    #     var: cyberark_session

    #Create logon account
    - name: Onboard logon account
      cyberark_account:
        logging_level: DEBUG
        identified_by: "address,username"
        safe: "UnixAccount"
        address: "{{ item.public_ip }}"
        username: "{{ logon_user }}"
        platform_id: UnixSSH
        secret: " {{ onboard_password }}"
        secret_management:
            automatic_management_enabled: true
        state: present
        cyberark_session: "{{ cyberark_session }}"
      loop_control:
        label: "{{logon_user}} is being onboarded"
      with_items: 
      - "{{ ec2.instances }}"
      register: cyberarklogon

    # - debug: msg="{{ cyberarklogon.results }}"

    - name: Onboard admin account
      cyberark_account:
        logging_level: DEBUG
        identified_by: "address,username"
        safe: "UnixAccount"
        address: "{{ item.public_ip }}"
        username: "{{ admin_user }}"
        platform_id: UnixSSH
        secret: "{{ onboard_password }}"
        secret_management:
            automatic_management_enabled: true
        state: present
        cyberark_session: "{{ cyberark_session }}"
      loop_control:
        label: "{{admin_user}} is being onboarded"
      with_items: "{{ ec2.instances }}"
      register: cyberarkadmin

    # - debug: msg="{{ item.result.result.address }}"
    #   with_items: "{{ cyberarkadmin.results }}"
    #   when: cyberarkadmin.status_code == 201

    #Create user account
    - name: Onboard user account
      cyberark_account:
        logging_level: DEBUG
        identified_by: "address,username"
        safe: "UnixAccount"
        address: "{{ item.0.public_ip }}"
        username: "{{ item.1 }}"
        platform_id: UnixSSH
        secret: " {{ onboard_password }}"
        secret_management:
            automatic_management_enabled: true
        state: present
        cyberark_session: "{{ cyberark_session }}"
      loop_control:
        label: "{{item.1}} is being onboarded"
      with_nested:
      - "{{ ec2.instances }}"
      - "{{ normal_user }}"
      register: cyberarkuser
      

    # - debug: msg="{{ cyberarkuser.results }}"
      # with_items:
      # - "{{ cyberarkuser }}"

    - name: Link logon account for cyberadmin
      # Create an item via API
      uri: 
        url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ item.0.result.result.id }}/LinkAccount"
        validate_certs: no
        method: POST
        return_content: yes
        headers:
          Authorization: "{{ cyberark_session.token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          safe: "{{ item.1.result.result.safeName }}"
          extraPasswordIndex: 1 #logon 
          name: "{{ item.1.result.result.name }}"
          folder: Root
      loop_control:
        label: "ID {{item.0.result.result.id}} has linked a logon account"
      with_nested:
      - "{{ cyberarkadmin.results }}"
      - "{{ cyberarklogon.results }}"
      when: item.0.result.result.address == item.1.result.result.address
    
    - name: Link logon account for cyberuser
      #Create an item via API
      uri: 
        url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ item.0.result.result.id }}/LinkAccount"
        validate_certs: no
        method: POST
        return_content: yes
        headers:
          Authorization: "{{ cyberark_session.token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          safe: "{{ item.1.result.result.safeName }}"
          extraPasswordIndex: 1 #logon 
          name: "{{ item.1.result.result.name }}"
          folder: Root
      loop_control:
        label: "ID {{item.0.result.result.id}} has linked a logon account"
      with_nested: 
      - "{{ cyberarkuser.results }}"
      - "{{ cyberarklogon.results }}"
      when: item.0.result.result.address == item.1.result.result.address

    - name: Link reconcile account for user accounts
      # Create an item via API
      uri: 
        url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ item.0.result.result.id }}/LinkAccount"
        validate_certs: no
        method: POST
        return_content: yes
        headers:
          Authorization: "{{ cyberark_session.token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          safe: "{{ item.1.result.result.safeName }}"
          extraPasswordIndex: 3 #reconcile
          name: "{{ item.1.result.result.name }}"
          folder: Root
      loop_control:
        label: "ID {{item.0.result.result.id}} has linked a reconcile account"
      with_nested:
      - "{{ cyberarkuser.results }}"
      - "{{ cyberarkadmin.results }}"
      when: item.0.result.result.address == item.1.result.result.address

    - name: Change cyberlogon account
      # Create an item via API
      uri: 
        url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ item.result.result.id }}/Change"
        validate_certs: no
        method: POST
        return_content: yes
        headers:
          Authorization: "{{ cyberark_session.token }}"
          Content-Type: "application/json"
        body_format: json
        body:
         ChangeEntireGroup: "false"
      loop_control:
        label: "{{item.result.result.id}} is being changed" 
      with_items:
      - "{{ cyberarklogon.results }}"
    # - wait_for:
    #     delay: 300
    #     timeout: 0

    # - name: check for status 
    #   uri:
    #     url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ cyberarklogon.result.result.id }}" 
    #     validate_certs: no
    #     method: GET
    #     return_content: yes
    #     headers:
    #       Authorization: "{{ cyberark_session.token }}"
    #       Content-Type: "application/json"
    #   register: checklogon
      # until: checklogon.json.secretManagement.status == "success"
      # retries: 3
      # delay: 60

    # - debug: msg="{{ checklogon.json }}"
    #   when: checkuser.json.secretManagement.status == "success"

    - name: Change cyberadmin account
      # Create an item via API
      uri: 
        url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ item.result.result.id }}/Change"
        validate_certs: no
        method: POST
        return_content: yes
        headers:
          Authorization: "{{ cyberark_session.token }}"
          Content-Type: "application/json"
        body_format: json
        body:
         ChangeEntireGroup: "false"
      loop_control:
        label: "{{item.result.result.id}} is being changed"
      with_items:
      - "{{ cyberarkadmin.results }}"

    # - wait_for:
    #     delay: 300
    #     timeout: 0

    # - name: check for status 
    #   uri:
    #     url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ cyberarkadmin.result.result.id }}" 
    #     validate_certs: no
    #     method: GET
    #     return_content: yes
    #     headers:
    #       Authorization: "{{ cyberark_session.token }}"
    #       Content-Type: "application/json"
    #   register: checkadmin
      # until: checkadmin.json.secretManagement.status == "success"
      # retries: 3
      # delay: 60

    # - debug: msg="{{ checkadmin.json }}"
    #   when: checkadmin.json.secretManagement.status == "success"
    
    - name: Reconcile cyberuser account
      # Create an item via API
      uri: 
        url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ item.result.result.id }}/Reconcile"
        validate_certs: no
        method: POST
        return_content: yes
        headers:
          Authorization: "{{ cyberark_session.token }}"
          Content-Type: "application/json"
      loop_control:
        label: "{{item.result.result.id}} is being reconciled"
      with_items: 
      - "{{ cyberarkuser.results }}"

    # - wait_for:
    #     delay: 300
    #     timeout: 0

    # - name: check for status
    #   uri:
    #     url: "{{ web_services_base_url }}/PasswordVault/api/Accounts/{{ cyberarkuser.result.result.id }}" 
    #     validate_certs: no
    #     method: GET
    #     return_content: yes
    #     headers:
    #       Authorization: "{{ cyberark_session.token }}"
    #       Content-Type: "application/json"
    #   register: checkuser
      # until: checkuser.json.secretManagement.status == "success"
      # retries: 3
      # delay: 60

    # - debug: msg="{{ checkuser.json }}"
    #   when: checkuser.json.secretManagement.status == "success"


    - name: Logoff from CyberArk Vault
      cyberark_authentication:
        state: absent
        cyberark_session: "{{ cyberark_session }}"

    # - name: Debug message
    #   debug: var=cyberark_session

    - name: Create database
      mysql_db: 
        name: "{{ db_database }}"
        state: present
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
    
    # store in database (account id (cyberark) - instance id (aws) - account type (logon/recon/user) - status(success/failure)      
    - name: Create Table in database  
      mysql_query:
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        login_db: "{{ db_database }}"
        query: 
        - CREATE TABLE IF NOT EXISTS pendingaccounts (instanceId VARCHAR(255) NOT NULL, id VARCHAR(255) NOT NULL,roles VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, address VARCHAR(255) NOT NULL, status VARCHAR(255) NOT NULL, categoryModificationTime BIGINT(255) NOT NULL, createdTime BIGINT(255) NOT NULL, lastModifiedTime BIGINT(255) NOT NULL, userName VARCHAR(255) NOT NULL, platformId VARCHAR(255) NOT NULL, safeName VARCHAR(255) NOT NULL, secretType VARCHAR(255) NOT NULL, noOfTries INT(255) NOT NULL, PRIMARY KEY(id));

    - name: Insert in database  
      mysql_query:
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        login_db: "{{ db_database }}"
        query:
        - INSERT INTO pendingaccounts (instanceId, id, roles, name, address, status, categoryModificationTime, createdTime, lastModifiedTime, userName, platformId, safeName, secretType, noOfTries) VALUES ("{{item.0.id}}", "{{item.2.result.result.id}}", "logon", "{{item.2.result.result.name}}", "{{item.2.result.result.address}}", "pending", "{{item.2.result.result.categoryModificationTime}}", "{{item.2.result.result.createdTime}}", "{{item.2.result.result.secretManagement.lastModifiedTime}}", "{{item.2.result.result.userName}}", "{{item.2.result.result.platformId}}", "{{item.2.result.result.safeName}}", "{{item.2.result.result.secretType}}", "0"); 
        - INSERT INTO pendingaccounts (instanceId, id, roles, name, address, status, categoryModificationTime, createdTime, lastModifiedTime, userName, platformId, safeName, secretType, noOfTries) VALUES ("{{item.0.id}}", "{{item.1.result.result.id}}", "admin", "{{item.1.result.result.name}}", "{{item.1.result.result.address}}", "pending", "{{item.1.result.result.categoryModificationTime}}", "{{item.1.result.result.createdTime}}", "{{item.1.result.result.secretManagement.lastModifiedTime}}", "{{item.1.result.result.userName}}", "{{item.1.result.result.platformId}}", "{{item.1.result.result.safeName}}", "{{item.1.result.result.secretType}}", "0"); 
      loop_control:
        label:
        - "{{item.1.result.result.id}} has been added into database"
        - "{{item.2.result.result.id}} has been added into database"
      with_nested:
      - "{{ ec2.instances }}" 
      - "{{ cyberarkadmin.results }}"     
      - "{{ cyberarklogon.results }}"
      when: item.0.public_ip == item.1.result.result.address and item.0.public_ip == item.2.result.result.address 

  #  - name: Insert in database  
  #     mysql_query:
  #       login_user: "{{ db_user }}"
  #       login_password: "{{ db_password }}"
  #       login_db: "{{ db_database }}"
  #       query:
  #       - INSERT INTO pendingaccounts (instanceId, id, roles, name, address, status, categoryModificationTime, createdTime, lastModifiedTime, userName, platformId, safeName, secretType, noOfTries) VALUES ("{{item.0.id}}", "{{item.1.result.result.id}}", "admin", "{{item.1.result.result.name}}", "{{item.1.result.result.address}}", "pending", "{{item.1.result.result.categoryModificationTime}}", "{{item.1.result.result.createdTime}}", "{{item.1.result.result.secretManagement.lastModifiedTime}}", "{{item.1.result.result.userName}}", "{{item.1.result.result.platformId}}", "{{item.1.result.result.safeName}}", "{{item.1.result.result.secretType}}", "0"); 
  #       - INSERT INTO pendingaccounts (instanceId, id, roles, name, address, status, categoryModificationTime, createdTime, lastModifiedTime, userName, platformId, safeName, secretType, noOfTries) VALUES ("{{item.0.id}}", "{{item.2.result.result.id}}", "logon", "{{item.2.result.result.name}}", "{{item.2.result.result.address}}", "pending", "{{item.2.result.result.categoryModificationTime}}", "{{item.2.result.result.createdTime}}", "{{item.2.result.result.secretManagement.lastModifiedTime}}", "{{item.2.result.result.userName}}", "{{cyberarklogon.result.result.platformId}}", "{{item.2.result.result.safeName}}", "{{item.2.result.result.secretType}}", "0"); 
  #     loop_control:
  #       label: "{{item.1.result.result.id}} has been added into database"
  #     with_nested:
  #     - "{{ ec2.instances }}" 
  #     - "{{ cyberarkadmin.results }}"     
  #     - "{{ cyberarklogon.results }}"
  #     when: item.0.public_ip == item.1.result.result.address and item.0.public_ip == item.2.result.result.address 
      
    - name: Insert in database  
      mysql_query:
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        login_db: "{{ db_database }}"
        query:
        - INSERT INTO pendingaccounts (instanceId, id, roles, name, address, status, categoryModificationTime, createdTime, lastModifiedTime, userName, platformId, safeName, secretType, noOfTries) VALUES ("{{item.0.id}}", "{{item.1.result.result.id}}", "user", "{{item.1.result.result.name}}", "{{item.1.result.result.address}}", "pending", "{{item.1.result.result.categoryModificationTime}}", "{{item.1.result.result.createdTime}}", "{{item.1.result.result.secretManagement.lastModifiedTime}}", "{{item.1.result.result.userName}}", "{{item.1.result.result.platformId}}", "{{item.1.result.result.safeName}}", "{{item.1.result.result.secretType}}", "0");
      loop_control:
        label: "{{item.1.result.result.id}} has been added into database"
      with_nested: 
      - "{{ ec2.instances }}" 
      - "{{ cyberarkuser.results }}"
      when: item.0.public_ip == item.1.result.result.address

    - name: Create Table in database  
      mysql_query:
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        login_db: "{{ db_database }}"
        query: 
        - CREATE TABLE IF NOT EXISTS successfulaccounts (instanceId VARCHAR(255) NOT NULL, id VARCHAR(255) NOT NULL, roles VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, address VARCHAR(255) NOT NULL, status VARCHAR(255) NOT NULL, categoryModificationTime BIGINT(255) NOT NULL, createdTime BIGINT(255) NOT NULL, lastModifiedTime BIGINT(255) NOT NULL, userName VARCHAR(255) NOT NULL, platformId VARCHAR(255) NOT NULL, safeName VARCHAR(255) NOT NULL, secretType VARCHAR(255) NOT NULL, noOfTries INT(255) NOT NULL, PRIMARY KEY(id));

  #python script (task: to check account status)
    - name: Run Python script to check account status
      # script: /home/dywoo/ansible-new/codes/main.py "{{ item.id }}"
      shell: "python3 /home/dywoo/ansible-new/codes/main.py {{ item.public_ip }} {{ item.id }}"
      loop_control:
        label: "{{item.public_ip}} has been successfully provisioned!"
      with_items: "{{ ec2.instances }}"

    - name: Insert in database  
      mysql_query:
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        login_db: testdb
        query: 
    # - INSERT INTO ec2 (dnsName, id, imageId, instanceType, launchTime, privateDNSName, privateIP, publicDNSName, publicIP, region, name) VALUES ("{{ec2.instances[0].dns_name}}", "{{ec2.instances[0].id}}", "{{ec2.instances[0].image_id}}", "{{ec2.instances[0].instance_type}}", "{{ec2.instances[0].launch_time}}", "{{ec2.instances[0].private_dns_name}}", "{{ec2.instances[0].private_ip}}", "{{ec2.instances[0].public_dns_name}}", "{{ec2.instances[0].public_ip}}", "{{ec2.instances[0].region}}", "{{ec2.instances[0].tags.Name}}"); 
        - INSERT INTO successfulaccounts SELECT * FROM pendingaccounts WHERE status = 'success' and address = {{ item.public_ip }} ;
        - DELETE FROM pendingaccounts WHERE status = 'success' and address = {{ item.public_ip }};